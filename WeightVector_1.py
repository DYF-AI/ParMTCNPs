# -*- coding:utf-8 -*-
# Author： DYF

# 以前两个和三个目标的权重向量文件：MATLAB生成的权重向量

import numpy as np
import random
import math
from random import shuffle

class WeightVector_1:
    def __init__(self, k, s):
        ## 参数k：目标个数   s: the choice of s determines how many vectors there in total.

        self.objectivesNumber = k  ## 这个类，有一部分参数可以使用SearchSpace的参数
        self.vectorsNumber = s  ## 届时，将实例SearchSpace类，使用其参数（当然最好将SearchSpace的参数进行封装）
        self.wv = []

        self.next1 = -1
        self.add = 1
        self.change = True

        self._list_number = 0
        self._list_true = True
        self._shuffle_1 = True
        self._shuffle_2 = True

        self._shuffle_3 = True
        self._list_true_1 = True
        self._list_true_2 = True
        self._list_true_3 = True

    def init_weightVector_parego(self):
        wv = []
        if self.objectivesNumber == 2:
            wv.append([0.01, 0.99])
            wv.append([0.11, 0.89])
            wv.append([0.22, 0.78])
            wv.append([0.33, 0.67])
            wv.append([0.44, 0.56])
            wv.append([0.56, 0.44])
            wv.append([0.67, 0.33])
            wv.append([0.78, 0.22])
            wv.append([0.89, 0.11])
            wv.append([0.99, 0.01])

            self.wv = wv  # ////////
            return wv

    ## 本来是想调用MATLAB的UniformPoint来生成权重向量，但是MATLAB不支持python3.7版本
    def init_weightVector_parego_1(self):
        if self.objectivesNumber == 2:
            wv = [[0.0000, 1.0000],
                  [0.0101, 0.9899],
                  [0.0202, 0.9798],
                  [0.0303, 0.9697],
                  [0.0404, 0.9596],
                  [0.0505, 0.9495],
                  [0.0606, 0.9394],
                  [0.0707, 0.9293],
                  [0.0808, 0.9192],
                  [0.0909, 0.9091],
                  [0.1010, 0.8990],
                  [0.1111, 0.8889],
                  [0.1212, 0.8788],
                  [0.1313, 0.8687],
                  [0.1414, 0.8586],
                  [0.1515, 0.8485],
                  [0.1616, 0.8384],
                  [0.1717, 0.8283],
                  [0.1818, 0.8182],
                  [0.1919, 0.8081],
                  [0.2020, 0.7980],
                  [0.2121, 0.7879],
                  [0.2222, 0.7778],
                  [0.2323, 0.7677],
                  [0.2424, 0.7576],
                  [0.2525, 0.7475],
                  [0.2626, 0.7374],
                  [0.2727, 0.7273],
                  [0.2828, 0.7172],
                  [0.2929, 0.7071],
                  [0.3030, 0.6970],
                  [0.3131, 0.6869],
                  [0.3232, 0.6768],
                  [0.3333, 0.6667],
                  [0.3434, 0.6566],
                  [0.3535, 0.6465],
                  [0.3636, 0.6364],
                  [0.3737, 0.6263],
                  [0.3838, 0.6162],
                  [0.3939, 0.6061],
                  [0.4040, 0.5960],
                  [0.4141, 0.5859],
                  [0.4242, 0.5758],
                  [0.4343, 0.5657],
                  [0.4444, 0.5556],
                  [0.4545, 0.5455],
                  [0.4646, 0.5354],
                  [0.4747, 0.5253],
                  [0.4848, 0.5152],
                  [0.4949, 0.5051],
                  [0.5051, 0.4949],
                  [0.5152, 0.4848],
                  [0.5253, 0.4747],
                  [0.5354, 0.4646],
                  [0.5455, 0.4545],
                  [0.5556, 0.4444],
                  [0.5657, 0.4343],
                  [0.5758, 0.4242],
                  [0.5859, 0.4141],
                  [0.5960, 0.4040],
                  [0.6061, 0.3939],
                  [0.6162, 0.3838],
                  [0.6263, 0.3737],
                  [0.6364, 0.3636],
                  [0.6465, 0.3535],
                  [0.6566, 0.3434],
                  [0.6667, 0.3333],
                  [0.6768, 0.3232],
                  [0.6869, 0.3131],
                  [0.6970, 0.3030],
                  [0.7071, 0.2929],
                  [0.7172, 0.2828],
                  [0.7273, 0.2727],
                  [0.7374, 0.2626],
                  [0.7475, 0.2525],
                  [0.7576, 0.2424],
                  [0.7677, 0.2323],
                  [0.7778, 0.2222],
                  [0.7879, 0.2121],
                  [0.7980, 0.2020],
                  [0.8081, 0.1919],
                  [0.8182, 0.1818],
                  [0.8283, 0.1717],
                  [0.8384, 0.1616],
                  [0.8485, 0.1515],
                  [0.8586, 0.1414],
                  [0.8687, 0.1313],
                  [0.8788, 0.1212],
                  [0.8889, 0.1111],
                  [0.8990, 0.1010],
                  [0.9091, 0.0909],
                  [0.9192, 0.0808],
                  [0.9293, 0.0707],
                  [0.9394, 0.0606],
                  [0.9495, 0.0505],
                  [0.9596, 0.0404],
                  [0.9697, 0.0303],
                  [0.9798, 0.0202],
                  [0.9899, 0.0101],
                  [1.0000, 0.0000]]
            self.wv = wv
            return wv
        elif self.objectivesNumber == 3:
            wv = [[0.0000, 0.0000, 1.0000],
                  [0.0000, 0.0833, 0.9167],
                  [0.0000, 0.1667, 0.8333],
                  [0.0000, 0.2500, 0.7500],
                  [0.0000, 0.3333, 0.6667],
                  [0.0000, 0.4167, 0.5833],
                  [0.0000, 0.5000, 0.5000],
                  [0.0000, 0.5833, 0.4167],
                  [0.0000, 0.6667, 0.3333],
                  [0.0000, 0.7500, 0.2500],
                  [0.0000, 0.8333, 0.1667],
                  [0.0000, 0.9167, 0.0833],
                  [0.0000, 1.0000, 0.0000],
                  [0.0833, 0.0000, 0.9167],
                  [0.0833, 0.0833, 0.8333],
                  [0.0833, 0.1667, 0.7500],
                  [0.0833, 0.2500, 0.6667],
                  [0.0833, 0.3333, 0.5833],
                  [0.0833, 0.4167, 0.5000],
                  [0.0833, 0.5000, 0.4167],
                  [0.0833, 0.5833, 0.3333],
                  [0.0833, 0.6667, 0.2500],
                  [0.0833, 0.7500, 0.1667],
                  [0.0833, 0.8333, 0.0833],
                  [0.0833, 0.9167, 0.0000],
                  [0.1667, 0.0000, 0.8333],
                  [0.1667, 0.0833, 0.7500],
                  [0.1667, 0.1667, 0.6667],
                  [0.1667, 0.2500, 0.5833],
                  [0.1667, 0.3333, 0.5000],
                  [0.1667, 0.4167, 0.4167],
                  [0.1667, 0.5000, 0.3333],
                  [0.1667, 0.5833, 0.2500],
                  [0.1667, 0.6667, 0.1667],
                  [0.1667, 0.7500, 0.0833],
                  [0.1667, 0.8333, 0.0000],
                  [0.2500, 0.0000, 0.7500],
                  [0.2500, 0.0833, 0.6667],
                  [0.2500, 0.1667, 0.5833],
                  [0.2500, 0.2500, 0.5000],
                  [0.2500, 0.3333, 0.4167],
                  [0.2500, 0.4167, 0.3333],
                  [0.2500, 0.5000, 0.2500],
                  [0.2500, 0.5833, 0.1667],
                  [0.2500, 0.6667, 0.0833],
                  [0.2500, 0.7500, 0.0000],
                  [0.3333, 0.0000, 0.6667],
                  [0.3333, 0.0833, 0.5833],
                  [0.3333, 0.1667, 0.5000],
                  [0.3333, 0.2500, 0.4167],
                  [0.3333, 0.3333, 0.3333],
                  [0.3333, 0.4167, 0.2500],
                  [0.3333, 0.5000, 0.1667],
                  [0.3333, 0.5833, 0.0833],
                  [0.3333, 0.6667, 0.0000],
                  [0.4167, 0.0000, 0.5833],
                  [0.4167, 0.0833, 0.5000],
                  [0.4167, 0.1667, 0.4167],
                  [0.4167, 0.2500, 0.3333],
                  [0.4167, 0.3333, 0.2500],
                  [0.4167, 0.4167, 0.1667],
                  [0.4167, 0.5000, 0.0833],
                  [0.4167, 0.5833, 0.0000],
                  [0.5000, 0.0000, 0.5000],
                  [0.5000, 0.0833, 0.4167],
                  [0.5000, 0.1667, 0.3333],
                  [0.5000, 0.2500, 0.2500],
                  [0.5000, 0.3333, 0.1667],
                  [0.5000, 0.4167, 0.0833],
                  [0.5000, 0.5000, 0.0000],
                  [0.5833, 0.0000, 0.4167],
                  [0.5833, 0.0833, 0.3333],
                  [0.5833, 0.1667, 0.2500],
                  [0.5833, 0.2500, 0.1667],
                  [0.5833, 0.3333, 0.0833],
                  [0.5833, 0.4167, 0.0000],
                  [0.6667, 0.0000, 0.3333],
                  [0.6667, 0.0833, 0.2500],
                  [0.6667, 0.1667, 0.1667],
                  [0.6667, 0.2500, 0.0833],
                  [0.6667, 0.3333, 0.0000],
                  [0.7500, 0.0000, 0.2500],
                  [0.7500, 0.0833, 0.1667],
                  [0.7500, 0.1667, 0.0833],
                  [0.7500, 0.2500, 0.0000],
                  [0.8333, 0.0000, 0.1667],
                  [0.8333, 0.0833, 0.0833],
                  [0.8333, 0.1667, 0.0000],
                  [0.9167, 0.0000, 0.0833],
                  [0.9167, 0.0833, 0.0000],
                  [1.0000, 0.0000, 0.0000]]
            self.wv = wv
            return wv

    # MTCNP
    def init_weightVector_parego_mtcnp(self):
        if self.objectivesNumber == 2:
            ## 150个向量（上不确定多少个比较适合），理论上向量组之间的欧氏距离越小越好
            wv = [[1.00000000000000e-06, 1],
                  [0.00671140939597315, 0.993288590604027],
                  [0.0134228187919463, 0.986577181208054],
                  [0.0201342281879195, 0.979865771812081],
                  [0.0268456375838926, 0.973154362416107],
                  [0.0335570469798658, 0.966442953020134],
                  [0.0402684563758389, 0.959731543624161],
                  [0.0469798657718121, 0.953020134228188],
                  [0.0536912751677852, 0.946308724832215],
                  [0.0604026845637584, 0.939597315436242],
                  [0.0671140939597315, 0.932885906040268],
                  [0.0738255033557047, 0.926174496644295],
                  [0.0805369127516779, 0.919463087248322],
                  [0.0872483221476510, 0.912751677852349],
                  [0.0939597315436242, 0.906040268456376],
                  [0.100671140939597, 0.899328859060403],
                  [0.107382550335570, 0.892617449664430],
                  [0.114093959731544, 0.885906040268456],
                  [0.120805369127517, 0.879194630872483],
                  [0.127516778523490, 0.872483221476510],
                  [0.134228187919463, 0.865771812080537],
                  [0.140939597315436, 0.859060402684564],
                  [0.147651006711409, 0.852348993288591],
                  [0.154362416107383, 0.845637583892618],
                  [0.161073825503356, 0.838926174496644],
                  [0.167785234899329, 0.832214765100671],
                  [0.174496644295302, 0.825503355704698],
                  [0.181208053691275, 0.818791946308725],
                  [0.187919463087248, 0.812080536912752],
                  [0.194630872483221, 0.805369127516779],
                  [0.201342281879195, 0.798657718120805],
                  [0.208053691275168, 0.791946308724832],
                  [0.214765100671141, 0.785234899328859],
                  [0.221476510067114, 0.778523489932886],
                  [0.228187919463087, 0.771812080536913],
                  [0.234899328859060, 0.765100671140940],
                  [0.241610738255034, 0.758389261744967],
                  [0.248322147651007, 0.751677852348993],
                  [0.255033557046980, 0.744966442953020],
                  [0.261744966442953, 0.738255033557047],
                  [0.268456375838926, 0.731543624161074],
                  [0.275167785234899, 0.724832214765101],
                  [0.281879194630872, 0.718120805369128],
                  [0.288590604026846, 0.711409395973154],
                  [0.295302013422819, 0.704697986577181],
                  [0.302013422818792, 0.697986577181208],
                  [0.308724832214765, 0.691275167785235],
                  [0.315436241610738, 0.684563758389262],
                  [0.322147651006711, 0.677852348993289],
                  [0.328859060402685, 0.671140939597316],
                  [0.335570469798658, 0.664429530201342],
                  [0.342281879194631, 0.657718120805369],
                  [0.348993288590604, 0.651006711409396],
                  [0.355704697986577, 0.644295302013423],
                  [0.362416107382550, 0.637583892617450],
                  [0.369127516778524, 0.630872483221477],
                  [0.375838926174497, 0.624161073825503],
                  [0.382550335570470, 0.617449664429530],
                  [0.389261744966443, 0.610738255033557],
                  [0.395973154362416, 0.604026845637584],
                  [0.402684563758389, 0.597315436241611],
                  [0.409395973154362, 0.590604026845638],
                  [0.416107382550336, 0.583892617449665],
                  [0.422818791946309, 0.577181208053691],
                  [0.429530201342282, 0.570469798657718],
                  [0.436241610738255, 0.563758389261745],
                  [0.442953020134228, 0.557046979865772],
                  [0.449664429530201, 0.550335570469799],
                  [0.456375838926175, 0.543624161073826],
                  [0.463087248322148, 0.536912751677852],
                  [0.469798657718121, 0.530201342281879],
                  [0.476510067114094, 0.523489932885906],
                  [0.483221476510067, 0.516778523489933],
                  [0.489932885906040, 0.510067114093960],
                  [0.496644295302013, 0.503355704697987],
                  [0.503355704697987, 0.496644295302013],
                  [0.510067114093960, 0.489932885906040],
                  [0.516778523489933, 0.483221476510067],
                  [0.523489932885906, 0.476510067114094],
                  [0.530201342281879, 0.469798657718121],
                  [0.536912751677852, 0.463087248322148],
                  [0.543624161073826, 0.456375838926175],
                  [0.550335570469799, 0.449664429530201],
                  [0.557046979865772, 0.442953020134228],
                  [0.563758389261745, 0.436241610738255],
                  [0.570469798657718, 0.429530201342282],
                  [0.577181208053691, 0.422818791946309],
                  [0.583892617449665, 0.416107382550336],
                  [0.590604026845638, 0.409395973154362],
                  [0.597315436241611, 0.402684563758389],
                  [0.604026845637584, 0.395973154362416],
                  [0.610738255033557, 0.389261744966443],
                  [0.617449664429530, 0.382550335570470],
                  [0.624161073825503, 0.375838926174497],
                  [0.630872483221477, 0.369127516778524],
                  [0.637583892617450, 0.362416107382550],
                  [0.644295302013423, 0.355704697986577],
                  [0.651006711409396, 0.348993288590604],
                  [0.657718120805369, 0.342281879194631],
                  [0.664429530201342, 0.335570469798658],
                  [0.671140939597316, 0.328859060402685],
                  [0.677852348993289, 0.322147651006711],
                  [0.684563758389262, 0.315436241610738],
                  [0.691275167785235, 0.308724832214765],
                  [0.697986577181208, 0.302013422818792],
                  [0.704697986577181, 0.295302013422819],
                  [0.711409395973154, 0.288590604026846],
                  [0.718120805369128, 0.281879194630872],
                  [0.724832214765101, 0.275167785234899],
                  [0.731543624161074, 0.268456375838926],
                  [0.738255033557047, 0.261744966442953],
                  [0.744966442953020, 0.255033557046980],
                  [0.751677852348993, 0.248322147651007],
                  [0.758389261744967, 0.241610738255034],
                  [0.765100671140940, 0.234899328859060],
                  [0.771812080536913, 0.228187919463087],
                  [0.778523489932886, 0.221476510067114],
                  [0.785234899328859, 0.214765100671141],
                  [0.791946308724832, 0.208053691275168],
                  [0.798657718120805, 0.201342281879195],
                  [0.805369127516779, 0.194630872483221],
                  [0.812080536912752, 0.187919463087248],
                  [0.818791946308725, 0.181208053691275],
                  [0.825503355704698, 0.174496644295302],
                  [0.832214765100671, 0.167785234899329],
                  [0.838926174496644, 0.161073825503356],
                  [0.845637583892618, 0.154362416107383],
                  [0.852348993288591, 0.147651006711409],
                  [0.859060402684564, 0.140939597315436],
                  [0.865771812080537, 0.134228187919463],
                  [0.872483221476510, 0.127516778523490],
                  [0.879194630872483, 0.120805369127517],
                  [0.885906040268456, 0.114093959731544],
                  [0.892617449664430, 0.107382550335570],
                  [0.899328859060403, 0.100671140939597],
                  [0.906040268456376, 0.0939597315436242],
                  [0.912751677852349, 0.0872483221476510],
                  [0.919463087248322, 0.0805369127516779],
                  [0.926174496644295, 0.0738255033557047],
                  [0.932885906040268, 0.0671140939597315],
                  [0.939597315436242, 0.0604026845637584],
                  [0.946308724832215, 0.0536912751677852],
                  [0.953020134228188, 0.0469798657718121],
                  [0.959731543624161, 0.0402684563758389],
                  [0.966442953020134, 0.0335570469798658],
                  [0.973154362416107, 0.0268456375838926],
                  [0.979865771812081, 0.0201342281879195],
                  [0.986577181208054, 0.0134228187919463],
                  [0.993288590604027, 0.00671140939597315],
                  [1, 1.00000000000000e-06]]
            self.wv = wv
            self.even = []
            for i in range(len(self.wv)):
                self.even.append(i)
            return self.wv

        elif self.objectivesNumber == 3:
            ## 231/3 = 77
            wv = [[0.0000, 0.0000, 1.0000],
                  [0.0000, 0.0500, 0.9500],
                  [0.0000, 0.1000, 0.9000],
                  [0.0000, 0.1500, 0.8500],
                  [0.0000, 0.2000, 0.8000],
                  [0.0000, 0.2500, 0.7500],
                  [0.0000, 0.3000, 0.7000],
                  [0.0000, 0.3500, 0.6500],
                  [0.0000, 0.4000, 0.6000],
                  [0.0000, 0.4500, 0.5500],
                  [0.0000, 0.5000, 0.5000],
                  [0.0000, 0.5500, 0.4500],
                  [0.0000, 0.6000, 0.4000],
                  [0.0000, 0.6500, 0.3500],
                  [0.0000, 0.7000, 0.3000],
                  [0.0000, 0.7500, 0.2500],
                  [0.0000, 0.8000, 0.2000],
                  [0.0000, 0.8500, 0.1500],
                  [0.0000, 0.9000, 0.1000],
                  [0.0000, 0.9500, 0.0500],
                  [0.0000, 1.0000, 0.0000],
                  [0.0500, 0.0000, 0.9500],
                  [0.0500, 0.0500, 0.9000],
                  [0.0500, 0.1000, 0.8500],
                  [0.0500, 0.1500, 0.8000],
                  [0.0500, 0.2000, 0.7500],
                  [0.0500, 0.2500, 0.7000],
                  [0.0500, 0.3000, 0.6500],
                  [0.0500, 0.3500, 0.6000],
                  [0.0500, 0.4000, 0.5500],
                  [0.0500, 0.4500, 0.5000],
                  [0.0500, 0.5000, 0.4500],
                  [0.0500, 0.5500, 0.4000],
                  [0.0500, 0.6000, 0.3500],
                  [0.0500, 0.6500, 0.3000],
                  [0.0500, 0.7000, 0.2500],
                  [0.0500, 0.7500, 0.2000],
                  [0.0500, 0.8000, 0.1500],
                  [0.0500, 0.8500, 0.1000],
                  [0.0500, 0.9000, 0.0500],
                  [0.0500, 0.9500, 0.0000],
                  [0.1000, 0.0000, 0.9000],
                  [0.1000, 0.0500, 0.8500],
                  [0.1000, 0.1000, 0.8000],
                  [0.1000, 0.1500, 0.7500],
                  [0.1000, 0.2000, 0.7000],
                  [0.1000, 0.2500, 0.6500],
                  [0.1000, 0.3000, 0.6000],
                  [0.1000, 0.3500, 0.5500],
                  [0.1000, 0.4000, 0.5000],
                  [0.1000, 0.4500, 0.4500],
                  [0.1000, 0.5000, 0.4000],
                  [0.1000, 0.5500, 0.3500],
                  [0.1000, 0.6000, 0.3000],
                  [0.1000, 0.6500, 0.2500],
                  [0.1000, 0.7000, 0.2000],
                  [0.1000, 0.7500, 0.1500],
                  [0.1000, 0.8000, 0.1000],
                  [0.1000, 0.8500, 0.0500],
                  [0.1000, 0.9000, 0.0000],
                  [0.1500, 0.0000, 0.8500],
                  [0.1500, 0.0500, 0.8000],
                  [0.1500, 0.1000, 0.7500],
                  [0.1500, 0.1500, 0.7000],
                  [0.1500, 0.2000, 0.6500],
                  [0.1500, 0.2500, 0.6000],
                  [0.1500, 0.3000, 0.5500],
                  [0.1500, 0.3500, 0.5000],
                  [0.1500, 0.4000, 0.4500],
                  [0.1500, 0.4500, 0.4000],
                  [0.1500, 0.5000, 0.3500],
                  [0.1500, 0.5500, 0.3000],
                  [0.1500, 0.6000, 0.2500],
                  [0.1500, 0.6500, 0.2000],
                  [0.1500, 0.7000, 0.1500],
                  [0.1500, 0.7500, 0.1000],
                  [0.1500, 0.8000, 0.0500],
                  [0.1500, 0.8500, 0.0000],
                  [0.2000, 0.0000, 0.8000],
                  [0.2000, 0.0500, 0.7500],
                  [0.2000, 0.1000, 0.7000],
                  [0.2000, 0.1500, 0.6500],
                  [0.2000, 0.2000, 0.6000],
                  [0.2000, 0.2500, 0.5500],
                  [0.2000, 0.3000, 0.5000],
                  [0.2000, 0.3500, 0.4500],
                  [0.2000, 0.4000, 0.4000],
                  [0.2000, 0.4500, 0.3500],
                  [0.2000, 0.5000, 0.3000],
                  [0.2000, 0.5500, 0.2500],
                  [0.2000, 0.6000, 0.2000],
                  [0.2000, 0.6500, 0.1500],
                  [0.2000, 0.7000, 0.1000],
                  [0.2000, 0.7500, 0.0500],
                  [0.2000, 0.8000, 0.0000],
                  [0.2500, 0.0000, 0.7500],
                  [0.2500, 0.0500, 0.7000],
                  [0.2500, 0.1000, 0.6500],
                  [0.2500, 0.1500, 0.6000],
                  [0.2500, 0.2000, 0.5500],
                  [0.2500, 0.2500, 0.5000],
                  [0.2500, 0.3000, 0.4500],
                  [0.2500, 0.3500, 0.4000],
                  [0.2500, 0.4000, 0.3500],
                  [0.2500, 0.4500, 0.3000],
                  [0.2500, 0.5000, 0.2500],
                  [0.2500, 0.5500, 0.2000],
                  [0.2500, 0.6000, 0.1500],
                  [0.2500, 0.6500, 0.1000],
                  [0.2500, 0.7000, 0.0500],
                  [0.2500, 0.7500, 0.0000],
                  [0.3000, 0.0000, 0.7000],
                  [0.3000, 0.0500, 0.6500],
                  [0.3000, 0.1000, 0.6000],
                  [0.3000, 0.1500, 0.5500],
                  [0.3000, 0.2000, 0.5000],
                  [0.3000, 0.2500, 0.4500],
                  [0.3000, 0.3000, 0.4000],
                  [0.3000, 0.3500, 0.3500],
                  [0.3000, 0.4000, 0.3000],
                  [0.3000, 0.4500, 0.2500],
                  [0.3000, 0.5000, 0.2000],
                  [0.3000, 0.5500, 0.1500],
                  [0.3000, 0.6000, 0.1000],
                  [0.3000, 0.6500, 0.0500],
                  [0.3000, 0.7000, 0.0000],
                  [0.3500, 0.0000, 0.6500],
                  [0.3500, 0.0500, 0.6000],
                  [0.3500, 0.1000, 0.5500],
                  [0.3500, 0.1500, 0.5000],
                  [0.3500, 0.2000, 0.4500],
                  [0.3500, 0.2500, 0.4000],
                  [0.3500, 0.3000, 0.3500],
                  [0.3500, 0.3500, 0.3000],
                  [0.3500, 0.4000, 0.2500],
                  [0.3500, 0.4500, 0.2000],
                  [0.3500, 0.5000, 0.1500],
                  [0.3500, 0.5500, 0.1000],
                  [0.3500, 0.6000, 0.0500],
                  [0.3500, 0.6500, 0.0000],
                  [0.4000, 0.0000, 0.6000],
                  [0.4000, 0.0500, 0.5500],
                  [0.4000, 0.1000, 0.5000],
                  [0.4000, 0.1500, 0.4500],
                  [0.4000, 0.2000, 0.4000],
                  [0.4000, 0.2500, 0.3500],
                  [0.4000, 0.3000, 0.3000],
                  [0.4000, 0.3500, 0.2500],
                  [0.4000, 0.4000, 0.2000],
                  [0.4000, 0.4500, 0.1500],
                  [0.4000, 0.5000, 0.1000],
                  [0.4000, 0.5500, 0.0500],
                  [0.4000, 0.6000, 0.0000],
                  [0.4500, 0.0000, 0.5500],
                  [0.4500, 0.0500, 0.5000],
                  [0.4500, 0.1000, 0.4500],
                  [0.4500, 0.1500, 0.4000],
                  [0.4500, 0.2000, 0.3500],
                  [0.4500, 0.2500, 0.3000],
                  [0.4500, 0.3000, 0.2500],
                  [0.4500, 0.3500, 0.2000],
                  [0.4500, 0.4000, 0.1500],
                  [0.4500, 0.4500, 0.1000],
                  [0.4500, 0.5000, 0.0500],
                  [0.4500, 0.5500, 0.0000],
                  [0.5000, 0.0000, 0.5000],
                  [0.5000, 0.0500, 0.4500],
                  [0.5000, 0.1000, 0.4000],
                  [0.5000, 0.1500, 0.3500],
                  [0.5000, 0.2000, 0.3000],
                  [0.5000, 0.2500, 0.2500],
                  [0.5000, 0.3000, 0.2000],
                  [0.5000, 0.3500, 0.1500],
                  [0.5000, 0.4000, 0.1000],
                  [0.5000, 0.4500, 0.0500],
                  [0.5000, 0.5000, 0.0000],
                  [0.5500, 0.0000, 0.4500],
                  [0.5500, 0.0500, 0.4000],
                  [0.5500, 0.1000, 0.3500],
                  [0.5500, 0.1500, 0.3000],
                  [0.5500, 0.2000, 0.2500],
                  [0.5500, 0.2500, 0.2000],
                  [0.5500, 0.3000, 0.1500],
                  [0.5500, 0.3500, 0.1000],
                  [0.5500, 0.4000, 0.0500],
                  [0.5500, 0.4500, 0.0000],
                  [0.6000, 0.0000, 0.4000],
                  [0.6000, 0.0500, 0.3500],
                  [0.6000, 0.1000, 0.3000],
                  [0.6000, 0.1500, 0.2500],
                  [0.6000, 0.2000, 0.2000],
                  [0.6000, 0.2500, 0.1500],
                  [0.6000, 0.3000, 0.1000],
                  [0.6000, 0.3500, 0.0500],
                  [0.6000, 0.4000, 0.0000],
                  [0.6500, 0.0000, 0.3500],
                  [0.6500, 0.0500, 0.3000],
                  [0.6500, 0.1000, 0.2500],
                  [0.6500, 0.1500, 0.2000],
                  [0.6500, 0.2000, 0.1500],
                  [0.6500, 0.2500, 0.1000],
                  [0.6500, 0.3000, 0.0500],
                  [0.6500, 0.3500, 0.0000],
                  [0.7000, 0.0000, 0.3000],
                  [0.7000, 0.0500, 0.2500],
                  [0.7000, 0.1000, 0.2000],
                  [0.7000, 0.1500, 0.1500],
                  [0.7000, 0.2000, 0.1000],
                  [0.7000, 0.2500, 0.0500],
                  [0.7000, 0.3000, 0.0000],
                  [0.7500, 0.0000, 0.2500],
                  [0.7500, 0.0500, 0.2000],
                  [0.7500, 0.1000, 0.1500],
                  [0.7500, 0.1500, 0.1000],
                  [0.7500, 0.2000, 0.0500],
                  [0.7500, 0.2500, 0.0000],
                  [0.8000, 0.0000, 0.2000],
                  [0.8000, 0.0500, 0.1500],
                  [0.8000, 0.1000, 0.1000],
                  [0.8000, 0.1500, 0.0500],
                  [0.8000, 0.2000, 0.0000],
                  [0.8500, 0.0000, 0.1500],
                  [0.8500, 0.0500, 0.1000],
                  [0.8500, 0.1000, 0.0500],
                  [0.8500, 0.1500, 0.0000],
                  [0.9000, 0.0000, 0.1000],
                  [0.9000, 0.0500, 0.0500],
                  [0.9000, 0.1000, 0.0000],
                  [0.9500, 0.0000, 0.0500],
                  [0.9500, 0.0500, 0.0000],
                  [1.0000, 0.0000, 0.0000]]
            self.wv = wv
            return self.wv

    def init_weightVector_parego_mtcnp_wv20(self):
        if self.objectivesNumber == 2:
            wv = [[1.00000000000000e-06, 1],
                  [0.0526315789473684, 0.947368421052632],
                  [0.105263157894737, 0.894736842105263],
                  [0.157894736842105, 0.842105263157895],
                  [0.210526315789474, 0.789473684210526],
                  [0.263157894736842, 0.736842105263158],
                  [0.315789473684211, 0.684210526315790],
                  [0.368421052631579, 0.631578947368421],
                  [0.421052631578947, 0.578947368421053],
                  [0.473684210526316, 0.526315789473684],
                  [0.526315789473684, 0.473684210526316],
                  [0.578947368421053, 0.421052631578947],
                  [0.631578947368421, 0.368421052631579],
                  [0.684210526315790, 0.315789473684211],
                  [0.736842105263158, 0.263157894736842],
                  [0.789473684210526, 0.210526315789474],
                  [0.842105263157895, 0.157894736842105],
                  [0.894736842105263, 0.105263157894737],
                  [0.947368421052632, 0.0526315789473684],
                  [1, 1.00000000000000e-06]]
            self.wv = wv
            return self.wv
        elif self.objectivesNumber == 3:  # 标号
            wv = [[0.000001000000000, 0.000001000000000, 1.000000000000000],  # 0
                  [0.000001000000000, 0.166666666666667, 0.833333333333333],  # 1
                  [0.000001000000000, 0.333333333333333, 0.666666666666667],  # 2
                  [0.000001000000000, 0.500000000000000, 0.500000000000000],  # 3
                  [0.000001000000000, 0.666666666666667, 0.333333333333333],  # 4
                  [0.000001000000000, 0.833333333333333, 0.166666666666667],  # 5
                  [0.000001000000000, 1.000000000000000, 0.000001000000000],  # 6
                  [0.166666666666667, 0.000001000000000, 0.833333333333333],  # 7
                  [0.166666666666667, 0.166666666666667, 0.666666666666667],  # 8
                  [0.166666666666667, 0.333333333333333, 0.500000000000000],  # 9
                  [0.166666666666667, 0.500000000000000, 0.333333333333333],  # 10
                  [0.166666666666667, 0.666666666666667, 0.166666666666667],  # 11
                  [0.166666666666667, 0.833333333333333, 0.000001000000000],  # 12
                  [0.333333333333333, 0.000001000000000, 0.666666666666667],  # 13
                  [0.333333333333333, 0.166666666666667, 0.500000000000000],  # 14
                  [0.333333333333333, 0.333333333333333, 0.333333333333333],  # 15
                  [0.333333333333333, 0.500000000000000, 0.166666666666667],  # 16
                  [0.333333333333333, 0.666666666666667, 0.000001000000000],  # 17
                  [0.500000000000000, 0.000001000000000, 0.500000000000000],  # 18
                  [0.500000000000000, 0.166666666666667, 0.333333333333333],  # 19
                  [0.500000000000000, 0.333333333333333, 0.166666666666667],  # 20
                  [0.500000000000000, 0.500000000000000, 0.000001000000000],  # 21
                  [0.666666666666667, 0.000001000000000, 0.333333333333333],  # 22
                  [0.666666666666667, 0.166666666666667, 0.166666666666667],  # 23
                  [0.666666666666667, 0.333333333333333, 0.000001000000000],  # 24
                  [0.833333333333333, 0.000001000000000, 0.166666666666667],  # 25
                  [0.833333333333333, 0.166666666666667, 0.000001000000000],  # 26
                  [1.000000000000000, 0.000001000000000, 0.000001000000000]]  # 27
            # wv = [[0.000000000000000, 0.000000000000000, 0.100000000000000],  # 0
            #       [0.025000000000000, 0.145000000000000, 0.830000000000000],  # 1
            #       [0.025000000000000, 0.300000000000000, 0.675000000000000],  # 2
            #       [0.025000000000000, 0.487500000000000, 0.487500000000000],  # 3
            #       [0.025000000000000, 0.675000000000000, 0.300000000000000],  # 4
            #       [0.025000000000000, 0.830000000000000, 0.145000000000000],  # 5
            #       [0.025000000000000, 0.950000000000000, 0.025000000000000],  # 6
            #       [0.145000000000000, 0.025000000000000, 0.830000000000000],  # 7
            #       [0.162500000000000, 0.162500000000000, 0.675000000000000],  # 8
            #       [0.187500000000000, 0.325000000000000, 0.487500000000000],  # 9
            #       [0.187500000000000, 0.487500000000000, 0.325000000000000],  # 10
            #       [0.145000000000000, 0.675000000000000, 0.180000000000000],  # 11
            #       [0.145000000000000, 0.830000000000000, 0.025000000000000],  # 12
            #       [0.300000000000000, 0.025000000000000, 0.675000000000000],  # 13
            #       [0.325000000000000, 0.187500000000000, 0.487500000000000],  # 14
            #       [0.333333333333333, 0.333333333333333, 0.333333333333333],  # 15
            #       [0.325000000000000, 0.487500000000000, 0.187500000000000],  # 16
            #       [0.300000000000000, 0.675000000000000, 0.025000000000000],  # 17
            #       [0.487500000000000, 0.025000000000000, 0.487500000000000],  # 18
            #       [0.487500000000000, 0.187500000000000, 0.325000000000000],  # 19
            #       [0.487500000000000, 0.325000000000000, 0.187500000000000],  # 20
            #       [0.487500000000000, 0.487500000000000, 0.025000000000000],  # 21
            #       [0.675000000000000, 0.025000000000000, 0.300000000000000],  # 22
            #       [0.675000000000000, 0.145000000000000, 0.180000000000000],  # 23
            #       [0.675000000000000, 0.300000000000000, 0.025000000000000],  # 24
            #       [0.830000000000000, 0.025000000000000, 0.145000000000000],  # 25
            #       [0.830000000000000, 0.145000000000000, 0.025000000000000],  # 26
            #       [1.0000000000000000, 0.000000000000000, 0.000000000000000]]  # 27
            self.wv = wv
            return self.wv

    def change_group_weight_wv20(self, iteration, flag):
        if self.objectivesNumber == 2:
            if self._list_true:  # 默认是True
                List0 = self.wv[0:2]
                List1 = self.wv[2:4]
                List2 = self.wv[4:6]
                List3 = self.wv[6:8]
                List4 = self.wv[8:10]
                List5 = self.wv[10:12]
                List6 = self.wv[12:14]
                List7 = self.wv[14:16]
                List8 = self.wv[16:18]
                List9 = self.wv[18:20]
                # 随机打乱列表顺序
                if self._shuffle_1:
                    self.List_1 = [List0, List1, List2, List3, List4, List5, List6, List7, List8, List9]
                    shuffle(self.List_1)
                    print(self.List_1)
                    self._shuffle_1 = False
                List_choice_1 = self.List_1[self._list_number]
                print('list_number:', self._list_number)
                self._list_number += 1
                if self._list_number == 10:
                    self._list_number = 0
                    self._list_true = False
                    self._shuffle_1 = True
                return List_choice_1[0], List_choice_1[1]
            else:
                List00 = self.wv[1:3]
                List11 = self.wv[3:5]
                List22 = self.wv[5:7]
                List33 = self.wv[7:9]
                List44 = self.wv[9:11]
                List55 = self.wv[11:13]
                List66 = self.wv[13:15]
                List77 = self.wv[15:17]
                List88 = self.wv[17:19]
                # 随机打乱列表顺序
                if self._shuffle_2:  # 只打乱一次
                    self.List_2 = [List00, List11, List22, List33, List44, List55, List66, List77, List88]
                    shuffle(self.List_2)
                    self._shuffle_2 = False
                List_choice_2 = self.List_2[self._list_number]
                self._list_number += 1
                if self._list_number == 8:
                    self._list_number = 0
                    self._list_true = True
                    self._shuffle_2 = True
                return List_choice_2[0], List_choice_2[1]
        ## 20190627 这里需要做一个修改，在空间中，向量的向量组成的向量组有很多种组合方式。
        elif self.objectivesNumber == 3:
            if self._list_true:  # 默认是True
                List0 = self.wv[0:2]
                List1 = self.wv[2:4]
                List2 = self.wv[4:6]
                List3 = self.wv[6:8]
                List4 = self.wv[8:10]
                List5 = self.wv[10:12]
                List6 = self.wv[12:14]
                List7 = self.wv[14:16]
                List8 = self.wv[16:18]
                List9 = self.wv[18:20]
                List10 = self.wv[20:22]
                List11 = self.wv[22:24]
                List12 = self.wv[24:26]
                List13 = self.wv[26:28]
                # 随机打乱列表顺序
                if self._shuffle_1:
                    self.List_1 = [List0, List1, List2, List3, List4, List5, List6, List7, List8, List9, List10, List11,
                                   List12, List13]
                    shuffle(self.List_1)
                    print(self.List_1)
                    self._shuffle_1 = False
                List_choice_1 = self.List_1[self._list_number]
                print('list_number:', self._list_number)
                self._list_number += 1
                if self._list_number == 13:
                    self._list_number = 0
                    self._list_true = False
                    self._shuffle_1 = True
                return List_choice_1[0], List_choice_1[1]
            else:
                List00 = self.wv[1:3]
                List11 = self.wv[3:5]
                List22 = self.wv[5:7]
                List33 = self.wv[7:9]
                List44 = self.wv[9:11]
                List55 = self.wv[11:13]
                List66 = self.wv[13:15]
                List77 = self.wv[15:17]
                List88 = self.wv[17:19]
                List99 = self.wv[19:21]
                List000 = self.wv[21:23]
                List001 = self.wv[23:25]
                List002 = self.wv[25:27]
                # 随机打乱列表顺序
                if self._shuffle_2:  # 只打乱一次
                    self.List_2 = [List00, List11, List22, List33, List44, List55, List66, List77, List88, List99,
                                   List000, List001, List002]
                    shuffle(self.List_2)
                    self._shuffle_2 = False
                List_choice_2 = self.List_2[self._list_number]
                self._list_number += 1
                if self._list_number == 11:
                    self._list_number = 0
                    self._list_true = True
                    self._shuffle_2 = True
                return List_choice_2[0], List_choice_2[1]


    def change_group_weight_task3_wv20(self, iteration, flag):
          # 分为19组
          if self.objectivesNumber == 2:
                if self._list_true:
                      List0 = self.wv[0:3]
                      List1 = self.wv[3:6]
                      List2 = self.wv[6:9]
                      List3 = self.wv[9:12]
                      List4 = self.wv[12:15]
                      List5 = self.wv[15:18]
                      #List6 = self.wv[18:]
                      List7 = self.wv[1:4]
                      List8 = self.wv[4:7]
                      List9 = self.wv[7:10]
                      # 随机打乱列表顺序
                      if self._shuffle_1:
                            self.List_1 = [List0, List1, List2, List3, List4, List5, List7, List8, List9]
                            shuffle(self.List_1)
                            print(self.List_1)
                            self._shuffle_1 = False
                      List_choice_1 = self.List_1[self._list_number]
                      print('list_number:', self._list_number)
                      self._list_number += 1
                      if self._list_number == 9:
                            self._list_number = 0
                            self._list_true = False
                            self._shuffle_1 = True
                      return List_choice_1[0], List_choice_1[1], List_choice_1[2]
                else:
                      List00 = self.wv[10:13]
                      List11 = self.wv[13:16]
                      List22 = self.wv[16:19]
                      List33 = self.wv[2:5]
                      List44 = self.wv[5:8]
                      List55 = self.wv[8:11]
                      List66 = self.wv[11:14]
                      List77 = self.wv[14:17]
                      List88 = self.wv[17:]
                      # 随机打乱列表顺序
                      if self._shuffle_2:  # 只打乱一次
                            self.List_2 = [List00, List11, List22, List33, List44, List55, List66, List77, List88]
                            shuffle(self.List_2)
                            self._shuffle_2 = False
                      List_choice_2 = self.List_2[self._list_number]
                      self._list_number += 1
                      if self._list_number == 9:
                            self._list_number = 0
                            self._list_true = True
                            self._shuffle_2 = True
                      return List_choice_2[0], List_choice_2[1], List_choice_2[2]
          elif self.objectivesNumber == 3:
                if self._list_true:
                      List0 = []
                      List1 = []
                      List2 = []
                      List3 = []
                      List4 = []
                      List5 = []
                      List6 = []
                      List7 = []
                      List8 = []
                      List9 = []
                      List10 = []

                      List0.append(self.wv[0])
                      List0.append(self.wv[1])
                      List0.append(self.wv[7])

                      List1.append(self.wv[2])
                      List1.append(self.wv[3])
                      List1.append(self.wv[9])

                      List2.append(self.wv[4])
                      List2.append(self.wv[5])
                      List2.append(self.wv[11])

                      List3.append(self.wv[7])
                      List3.append(self.wv[8])
                      List3.append(self.wv[13])

                      List4.append(self.wv[9])
                      List4.append(self.wv[10])
                      List4.append(self.wv[15])

                      List5.append(self.wv[11])
                      List5.append(self.wv[12])
                      List5.append(self.wv[17])

                      List6.append(self.wv[13])
                      List6.append(self.wv[14])
                      List6.append(self.wv[18])

                      List7.append(self.wv[15])
                      List7.append(self.wv[16])
                      List7.append(self.wv[20])

                      List8.append(self.wv[17])
                      List8.append(self.wv[20])
                      List8.append(self.wv[23])

                      List9.append(self.wv[22])
                      List9.append(self.wv[23])
                      List9.append(self.wv[25])

                      List10.append(self.wv[25])
                      List10.append(self.wv[26])
                      List10.append(self.wv[27])


                      # 随机打乱列表顺序
                      if self._shuffle_1:
                            self.List_1 = [List0, List1, List2, List3, List4, List5, List6, List7, List8, List9, List10]
                            shuffle(self.List_1)
                            print(self.List_1)
                            self._shuffle_1 = False
                      List_choice_1 = self.List_1[self._list_number]
                      print('list_number:', self._list_number)
                      self._list_number += 1
                      if self._list_number == 11:
                            self._list_number = 0
                            self._list_true = False
                            self._shuffle_1 = True
                      return List_choice_1[0], List_choice_1[1], List_choice_1[2]
                else:
                      List00 = []
                      List11 = []
                      List22 = []
                      List33 = []
                      List44 = []
                      List55 = []
                      List66 = []
                      List77 = []
                      List88 = []
                      List99 = []

                      List00.append(self.wv[1])
                      List00.append(self.wv[2])
                      List00.append(self.wv[8])

                      List11.append(self.wv[3])
                      List11.append(self.wv[4])
                      List11.append(self.wv[10])

                      List22.append(self.wv[5])
                      List22.append(self.wv[6])
                      List22.append(self.wv[12])

                      List33.append(self.wv[8])
                      List33.append(self.wv[9])
                      List33.append(self.wv[14])

                      List44.append(self.wv[10])
                      List44.append(self.wv[11])
                      List44.append(self.wv[16])

                      List55.append(self.wv[14])
                      List55.append(self.wv[15])
                      List55.append(self.wv[17])

                      List66.append(self.wv[16])
                      List66.append(self.wv[17])
                      List66.append(self.wv[21])

                      List77.append(self.wv[18])
                      List77.append(self.wv[19])
                      List77.append(self.wv[22])

                      List88.append(self.wv[20])
                      List88.append(self.wv[21])
                      List88.append(self.wv[24])

                      List99.append(self.wv[23])
                      List99.append(self.wv[24])
                      List99.append(self.wv[26])


                      # 随机打乱列表顺序
                      if self._shuffle_2:  # 只打乱一次
                            self.List_2 = [List00, List11, List22, List33, List44, List55, List66, List77, List88, List99]
                            shuffle(self.List_2)
                            self._shuffle_2 = False
                      List_choice_2 = self.List_2[self._list_number]
                      self._list_number += 1
                      if self._list_number == 10:
                            self._list_number = 0
                            self._list_true = True
                            self._shuffle_2 = True
                      return List_choice_2[0], List_choice_2[1], List_choice_2[2]

    # 2个目标的方式不变，改变的的3个目标的方式
    def change_group_weight_wv20_1(self, iteration, flag):
        if self.objectivesNumber == 2:
            if self._list_true:  # 默认是True
                List0 = self.wv[0:2]
                List1 = self.wv[2:4]
                List2 = self.wv[4:6]
                List3 = self.wv[6:8]
                List4 = self.wv[8:10]
                List5 = self.wv[10:12]
                List6 = self.wv[12:14]
                List7 = self.wv[14:16]
                List8 = self.wv[16:18]
                List9 = self.wv[18:20]
                # 随机打乱列表顺序
                if self._shuffle_1:
                    self.List_1 = [List0, List1, List2, List3, List4, List5, List6, List7, List8, List9]
                    shuffle(self.List_1)
                    print(self.List_1)
                    self._shuffle_1 = False
                List_choice_1 = self.List_1[self._list_number]
                print('list_number:', self._list_number)
                self._list_number += 1
                if self._list_number == 10:
                    self._list_number = 0
                    self._list_true = False
                    self._shuffle_1 = True
                return List_choice_1[0], List_choice_1[1]
            else:
                List00 = self.wv[1:3]
                List11 = self.wv[3:5]
                List22 = self.wv[5:7]
                List33 = self.wv[7:9]
                List44 = self.wv[9:11]
                List55 = self.wv[11:13]
                List66 = self.wv[13:15]
                List77 = self.wv[15:17]
                List88 = self.wv[17:19]
                # 随机打乱列表顺序
                if self._shuffle_2:  # 只打乱一次
                    self.List_2 = [List00, List11, List22, List33, List44, List55, List66, List77, List88]
                    shuffle(self.List_2)
                    self._shuffle_2 = False
                List_choice_2 = self.List_2[self._list_number]
                self._list_number += 1
                if self._list_number == 8:
                    self._list_number = 0
                    self._list_true = True
                    self._shuffle_2 = True
                return List_choice_2[0], List_choice_2[1]
        ## 20190627 这里需要做一个修改，在空间中，向量的向量组成的向量组有很多种组合方式。

        elif self.objectivesNumber == 3:
            if self._list_true_1:  # 默认是True
                List1_0 = self.wv[0:2]
                List1_1 = self.wv[2:4]
                List1_2 = self.wv[4:6]
                List1_3 = self.wv[7:9]
                List1_4 = self.wv[9:11]
                List1_5 = self.wv[11:13]
                List1_6 = self.wv[13:15]
                List1_7 = self.wv[15:17]
                List1_8 = self.wv[18:20]
                List1_9 = self.wv[20:22]
                List1_10 = self.wv[22:24]
                List1_11 = self.wv[25:27]
                # 随机打乱列表顺序
                if self._shuffle_1:
                    self.List_1 = [List1_0, List1_1, List1_2, List1_3, List1_4, List1_5, List1_6, List1_7, List1_8,
                                   List1_9, List1_10, List1_11]
                    shuffle(self.List_1)
                    print(self.List_1)
                    self._shuffle_1 = False
                List_choice_1 = self.List_1[self._list_number]
                print('list_number:', self._list_number)
                self._list_number += 1
                if self._list_number == 12:
                    self._list_number = 0
                    self._list_true_1 = False
                    self._list_true_2 = True
                    self._list_true_3 = True
                    self._shuffle_1 = True
                print('NO.1: wv')
                return List_choice_1[0], List_choice_1[1]
            elif self._list_true_2:
                List2_0 = []
                List2_1 = []
                List2_2 = []
                List2_3 = []
                List2_4 = []
                List2_5 = []
                List2_6 = []
                List2_7 = []
                List2_8 = []
                List2_9 = []
                List2_10 = []
                List2_11 = []
                List2_0.append(self.wv[1])
                List2_0.append(self.wv[7])
                List2_1.append(self.wv[2])
                List2_1.append(self.wv[8])
                List2_2.append(self.wv[3])
                List2_2.append(self.wv[9])
                List2_3.append(self.wv[4])
                List2_3.append(self.wv[10])
                List2_4.append(self.wv[5])
                List2_4.append(self.wv[11])
                List2_5.append(self.wv[6])
                List2_5.append(self.wv[12])
                List2_6.append(self.wv[14])
                List2_6.append(self.wv[18])
                List2_7.append(self.wv[15])
                List2_7.append(self.wv[19])
                List2_8.append(self.wv[16])
                List2_8.append(self.wv[20])
                List2_9.append(self.wv[17])
                List2_9.append(self.wv[21])
                List2_10.append(self.wv[23])
                List2_10.append(self.wv[25])
                List2_11.append(self.wv[24])
                List2_11.append(self.wv[26])
                # 随机打乱列表顺序
                if self._shuffle_2:  # 只打乱一次
                    self.List_2 = [List2_0, List2_1, List2_2, List2_3, List2_4, List2_5, List2_6, List2_7, List2_8,
                                   List2_9, List2_10, List2_11]
                    shuffle(self.List_2)
                    self._shuffle_2 = False
                List_choice_2 = self.List_2[self._list_number]
                print('list_number:', self._list_number)
                self._list_number += 1
                if self._list_number == 12:
                    self._list_number = 0
                    self._list_true_2 = False
                    self._shuffle_2 = True
                print('NO.2: wv')
                return List_choice_2[0], List_choice_2[1]
            elif self._list_true_3:
                List3_0 = []
                List3_1 = []
                List3_2 = []
                List3_3 = []
                List3_4 = []
                List3_5 = []
                List3_6 = []
                List3_7 = []
                List3_8 = []
                List3_9 = []
                List3_10 = []
                List3_11 = []
                List3_0.append(self.wv[7])
                List3_0.append(self.wv[13])
                List3_1.append(self.wv[18])
                List3_1.append(self.wv[22])
                List3_2.append(self.wv[25])
                List3_2.append(self.wv[27])
                List3_3.append(self.wv[1])
                List3_3.append(self.wv[8])
                List3_4.append(self.wv[14])
                List3_4.append(self.wv[19])
                List3_5.append(self.wv[23])
                List3_5.append(self.wv[26])
                List3_6.append(self.wv[9])
                List3_6.append(self.wv[15])
                List3_7.append(self.wv[20])
                List3_7.append(self.wv[24])
                List3_8.append(self.wv[3])
                List3_8.append(self.wv[10])
                List3_9.append(self.wv[16])
                List3_9.append(self.wv[17])
                List3_10.append(self.wv[11])
                List3_10.append(self.wv[17])
                List3_11.append(self.wv[5])
                List3_11.append(self.wv[12])
                # 随机打乱列表顺序
                if self._shuffle_3:  # 只打乱一次
                    self.List_3 = [List3_0, List3_1, List3_2, List3_3, List3_4, List3_5, List3_6, List3_7, List3_8,
                                   List3_9, List3_10, List3_11]
                    shuffle(self.List_3)
                    self._shuffle_3 = False
                List_choice_3 = self.List_3[self._list_number]
                print('list_number:', self._list_number)
                self._list_number += 1
                if self._list_number == 12:
                    self._list_number = 0
                    self._list_true_1 = True
                    self._shuffle_3 = True
                print('NO.3: wv')
                return List_choice_3[0], List_choice_3[1]

    def changeWeight_1(self, iteration):
        ## 随机抽取一个
        index = int(random.uniform(0, len(self.wv)))
        return self.wv[index]

    def change_group_weight(self, iteration, flag):

        if self.objectivesNumber == 2:  ##150个向量
            if flag == 2:  ## 两个任务
                index = int(random.uniform(0, len(self.wv) - 1))
                return self.wv[index], self.wv[index + 1]
            elif flag == 3:
                index = int(random.uniform(0, len(self.wv) - 2))
                return self.wv[index], self.wv[index + 1], self.wv[index + 2]
            else:
                print('flag must be 2 or 3!')

    def change_group_weight_1(self, iteration, flag):
        print('self.even:', self.even)
        if self.objectivesNumber == 2:  ##150个向量
            if flag == 2:  ## 两个任务
                index = random.sample(self.even, 1)
                index = int(index[0])
                self.even.remove(index)
                print('self.even_1:', self.even)
                return self.wv[index], self.wv[index + 1]
            elif flag == 3:
                index = int(random.uniform(0, len(self.wv) - 2))
                return self.wv[index], self.wv[index + 1], self.wv[index + 2]
            else:
                print('flag must be 2 or 3!')

        elif self.objectivesNumber == 3:  ##150个向量
            if flag == 2:
                index = int(random.uniform(0, len(self.wv) - 1))
                return self.wv[index], self.wv[index + 1]
            elif flag == 3:
                index = int(random.uniform(0, len(self.wv) - 2))
                return self.wv[index], self.wv[index + 1], self.wv[index + 2]
            else:
                print('flag must be 2 or 3!')
        else:
            print('objectivesNumber must be 2 or 3!')


    def changeWeight(self, iteration):  # 当iteration每变化5次就会改变权重向量
        i = 0
        if iteration % 5 == 0:  #
            self.change = True
        if self.change:
            if self.next1 == 9 or (self.next1 == 0 and self.add == -1):
                self.add *= -1
            self.next1 += self.add
        newVector = self.wv[self.next1]
        self.change = True
        return newVector
